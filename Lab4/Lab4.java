import java.awt.Font;
import java.io.UnsupportedEncodingException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.awt.datatransfer.Clipboard;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 *
 * @author Tim Mendez, Matt Versaggi, Devan Carlson
 */
public class Lab4 extends javax.swing.JFrame {

    private File fastaFile;
    private SuffixTree tree;
    private ArrayList<Integer> indices;
    
    /**
     * Creates new form Lab4
     */
    public Lab4() {
        initComponents();
        titleText.setFont(new Font("Serif", Font.PLAIN, 28));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fastaFileButton = new javax.swing.JButton();
        fastaFileText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        queryText = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        pasteButton = new javax.swing.JButton();
        goButton = new javax.swing.JButton();
        titleText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("DNA Sequence FASTA File: ");

        fastaFileButton.setText("Find File");
        fastaFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastaFileButtonActionPerformed(evt);
            }
        });

        queryText.setColumns(20);
        queryText.setRows(5);
        jScrollPane1.setViewportView(queryText);

        jLabel2.setText("Query DNA");

        pasteButton.setText("Paste");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        titleText.setText("Lab 4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(goButton)
                .addGap(177, 177, 177))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fastaFileButton)
                                .addGap(31, 31, 31)
                                .addComponent(fastaFileText, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(pasteButton))
                                .addGap(22, 22, 22)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(titleText)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(titleText)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fastaFileButton)
                    .addComponent(fastaFileText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pasteButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goButton)
                        .addGap(12, 12, 12))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String getClipboardContents() {
        String result = "";
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        //odd: the Object param of getContents is not currently used
        Transferable contents = clipboard.getContents(null);
        boolean hasTransferableText = (contents != null) &&
            contents.isDataFlavorSupported(DataFlavor.stringFlavor) ;
        if (hasTransferableText) {
            try {
                result = (String)contents.getTransferData(DataFlavor.stringFlavor);
            }
            catch (UnsupportedFlavorException | IOException ex){
                System.out.println(ex);
                ex.printStackTrace();
            }
        }
        return result;
    }

    private void fastaFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastaFileButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            String filename = file + "";
            this.fastaFile = file;
            fastaFileText.setText(filename);
        }
    }//GEN-LAST:event_fastaFileButtonActionPerformed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        queryText.setText(getClipboardContents());
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        String sequence = "";
        Scanner scan = null;

        indices = new ArrayList<Integer>();

        if (fastaFileText.getText().equals("") || queryText.getText().equals("")) {
            showPopup("Error", "You need to choose a FASTA file for the DNA sequence " + 
                    "and paste a query text");
            return;
        }

        try {
            scan = new Scanner(fastaFile);
        }
        catch(FileNotFoundException e) {
            System.out.println(e);
        }

        //Eating first line of FASTA file
        scan.nextLine();

        //Constructing DNA sequence String from file
        while(scan.hasNextLine())
            sequence += scan.nextLine();

        tree = new SuffixTree(sequence + "$");

        ArrayList<String> queryStrings = makeQueryStrings(queryText.getText().toLowerCase());

        System.out.println("Query strings are " + queryStrings);
        for (int i = 0; i < queryStrings.size(); i++) {
            tree.reset();
            findString(queryStrings.get(i));
        }

        try {
            buildCSV(System.getProperty("user.home") + "/Desktop/Lab4");
        } catch (Exception e) {
            showPopup("Error", "An error occured: " + e.toString());
        }
    }//GEN-LAST:event_goButtonActionPerformed

    public ArrayList<String> makeQueryStrings(String query) {
        ArrayList<String> queryStrings = new ArrayList<String>();
        
        for (int i = 0; i < query.length(); i++) {
            char letter = query.charAt(i);
            switch (letter) {
            case 'w':  // a or t
                addTwo('a', 't', queryStrings);
                break;
            case 's':  // c or g
                addTwo('c', 'g', queryStrings);
                break;
            case 'm':  // a or c
                addTwo('a', 'c', queryStrings);
                break;
            case 'k':  // g or t
                addTwo('g', 't', queryStrings);
                break;
            case 'r':  // a or g
                addTwo('a', 'g', queryStrings);
                break;
            case 'y':  // c or t
                addTwo('c', 't', queryStrings);
                break;
            default:
                addNormal(letter, queryStrings);
                break;
            }
        }

        return queryStrings;
    }

    public ArrayList<String> addTwo(char letter1, char letter2, ArrayList<String> list) {
        if (list.size() == 0) {
            list.add("" + letter1);
            list.add("" + letter2);
            return list;
        }

        ArrayList<String> copyList = new ArrayList<String>(list);
        for (int i = 0; i < list.size(); i++) {
            list.set(i, list.get(i) + letter1);
        }
        list.addAll(copyList);
        for (int i = copyList.size(); i < list.size(); i++) {
            list.set(i, list.get(i) + letter2);
        }
        return list;
    }

    public ArrayList<String> addNormal(char letter, ArrayList<String> list) {
        if (list.size() == 0) {
            list.add("" + letter);
            return list;
        }
        for (int i = 0; i < list.size(); i++) {
            list.set(i, list.get(i) + letter);
        }
        return list;
    }



    public void findString(String toMatch) {
        ArrayList<Integer> curIndices = tree.findString(toMatch, tree.getRoot());

        if(curIndices == null)
            System.out.println("Substring not found");
        else
            System.out.println("Result: " + curIndices);

        indices.addAll(curIndices);
    }

    private void buildCSV(String filename) throws FileNotFoundException, UnsupportedEncodingException{
        PrintWriter writer = new PrintWriter(filename + "-Output.csv", "UTF-8");

        writer.println("Position,Total Positions Found");

        for(int i = 0; i < indices.size(); i++) {
            if (i == 0) 
                writer.println(indices.get(i) + "," + indices.size());
            else 
                writer.println(indices.get(i));
        }

        writer.close();

        showPopup("Done", "CSV file " + filename + "-Output.csv" + " created");
    }

    
    private void showPopup(String title, String text) {
        JOptionPane error = new JOptionPane();
        error.showMessageDialog(null, text, title, JOptionPane.ERROR_MESSAGE);
        error.setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lab4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lab4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lab4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lab4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lab4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fastaFileButton;
    private javax.swing.JLabel fastaFileText;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton pasteButton;
    private javax.swing.JTextArea queryText;
    private javax.swing.JLabel titleText;
    // End of variables declaration//GEN-END:variables
}
